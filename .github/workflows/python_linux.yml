name: Python On Linux
on:
  workflow_call:

jobs:
  test-python-app:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app:
          - name: django-postgres
            path: django-postgres/django_postgres
            script_dir: django_postgres
          - name: flask-mysql-jwt
            path: flask-mysql_app
            script_dir: flask-mysql_app

        config:
          - name: record_latest_replay_build
            record_src: latest
            replay_src: build
          - name: record_build_replay_latest
            record_src: build
            replay_src: latest
          - name: record_build_replay_build
            record_src: build
            replay_src: build

    name: ${{ matrix.app.name }} (${{ matrix.config.name }})
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: record
        uses: ./.github/actions/download-binary
        with:
          src: ${{ matrix.config.record_src }}

      - id: replay
        uses: ./.github/actions/download-binary
        with:
          src: ${{ matrix.config.replay_src }}

      - name: Checkout the samples-python repository
        uses: actions/checkout@v4
        with:
          repository: officialasishkumar/samples-python
          path: samples-python

      # Create a directory to store logs and results for this specific job
      - name: Create results directory
        run: mkdir -p results

      - name: Run the ${{ matrix.app.name }} application
        env:
          RECORD_BIN: ${{ steps.record.outputs.path }}
          REPLAY_BIN: ${{ steps.replay.outputs.path }}
        run: |
          set -o pipefail # Make sure the script's exit code is propagated
          cd samples-python/${{ matrix.app.path }}
          source $GITHUB_WORKSPACE/.github/workflows/test_workflow_scripts/python/${{ matrix.app.script_dir }}/python-linux.sh 2>&1 | tee $GITHUB_WORKSPACE/results/output.log

      # This step will always run, even if the previous step fails
      - name: Archive test results
        if: always()
        run: |
          # Create a summary file with the job status
          echo "Job: ${{ matrix.app.name }} (${{ matrix.config.name }})" > summary.txt
          echo "Status: ${{ job.status }}" >> summary.txt
          echo "See attached logs for details." >> summary.txt

          # Move the summary into the results directory
          mv summary.txt results/

          # Create a zip file for this job's results
          zip -r results.zip results/

      # Upload the zip file as an artifact
      - name: Upload results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.app.name }}-record-${{ matrix.config.record_src }}-replay-${{ matrix.config.replay_src }}
          path: results.zip

  send-summary-report:
    # This job must wait for all matrix jobs to finish
    needs: test-python-app
    # `if: always()` ensures this job runs even if some of the tests failed
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results

      - name: Prepare email content and attachments
        id: prep-email
        run: |
          # Create a comprehensive summary file
          echo "# Python Linux Tests Report" > summary_body.md
          echo "" >> summary_body.md
          echo "**Workflow Run:** [#${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> summary_body.md
          echo "**Repository:** ${{ github.repository }}" >> summary_body.md
          echo "**Branch:** ${{ github.ref_name }}" >> summary_body.md
          echo "**Timestamp:** $(date)" >> summary_body.md
          echo "" >> summary_body.md

          # Count failures and collect details
          failed_count=0
          total_count=0

          # Add summary table
          echo "## Summary" >> summary_body.md
          echo "| Project | Configuration | Status |" >> summary_body.md
          echo "|---|---|---|" >> summary_body.md

          # Process all summary files
          for file in $(find all-results -type f -name 'summary.txt'); do
            total_count=$((total_count + 1))
            JOB_NAME=$(grep "Job:" "$file" | sed 's/Job: //' | sed 's/ (.*//')
            JOB_CONFIG=$(grep "Job:" "$file" | sed 's/.*(//' | sed 's/).*//')
            JOB_STATUS=$(grep "Status:" "$file" | sed 's/Status: //')
            
            if [ "$JOB_STATUS" = "success" ]; then
              STATUS_ICON="✅ Success"
            else
              STATUS_ICON="❌ Failed"
              failed_count=$((failed_count + 1))
            fi
            echo "| ${JOB_NAME} | ${JOB_CONFIG} | ${STATUS_ICON} |" >> summary_body.md
          done

          echo "" >> summary_body.md
          echo "**Total Tests:** $total_count | **Failed:** $failed_count | **Passed:** $((total_count - failed_count))" >> summary_body.md

          # Add failure details if any
          if [ $failed_count -gt 0 ]; then
            echo "" >> summary_body.md
            echo "## 🚨 Failure Details" >> summary_body.md
            echo "" >> summary_body.md
            
            for file in $(find all-results -type f -name 'summary.txt'); do
              JOB_NAME=$(grep "Job:" "$file" | sed 's/Job: //' | sed 's/ (.*//')
              JOB_CONFIG=$(grep "Job:" "$file" | sed 's/.*(//' | sed 's/).*//')
              JOB_STATUS=$(grep "Status:" "$file" | sed 's/Status: //')
              
              if [ "$JOB_STATUS" != "success" ]; then
                echo "### ❌ ${JOB_NAME} (${JOB_CONFIG})" >> summary_body.md
                echo "**Status:** ${JOB_STATUS}" >> summary_body.md
                echo "" >> summary_body.md
                
                # Try to get some log info from the directory
                dir_name=$(dirname "$file")
                log_file=$(find "$dir_name" -name "output.log" | head -1)
                if [ -n "$log_file" ] && [ -f "$log_file" ]; then
                  echo "**Last 30 lines of logs:**" >> summary_body.md
                  echo "\`\`\`" >> summary_body.md
                  tail -30 "$log_file" >> summary_body.md
                  echo "\`\`\`" >> summary_body.md
                fi
                echo "" >> summary_body.md
                echo "---" >> summary_body.md
                echo "" >> summary_body.md
              fi
            done
          fi

          # Always attach all zip files
          echo "attachment_path=all-results/*/*.zip" >> $GITHUB_OUTPUT

          # Set email subject based on results
          if [ $failed_count -gt 0 ]; then
            echo "email_subject=🚨 Python Tests FAILED ($failed_count/$total_count) - ${{ github.repository }} #${{ github.run_id }}" >> $GITHUB_OUTPUT
          else
            echo "email_subject=✅ Python Tests PASSED - ${{ github.repository }} #${{ github.run_id }}" >> $GITHUB_OUTPUT
          fi

      - name: Send summary email
        uses: dawidd6/action-send-mail@v3
        with:
          # SMTP server connection details (ensure these secrets exist)
          server_address: "smtp.gmail.com"
          server_port: "587"
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}

          # Email details
          subject: ${{ steps.prep-email.outputs.email_subject }}
          body: file://summary_body.md
          to: ${{ secrets.RECIPIENT_EMAILS }}
          from: ${{ secrets.GMAIL_USERNAME }}

          attachments: ${{ steps.prep-email.outputs.attachment_path }}
