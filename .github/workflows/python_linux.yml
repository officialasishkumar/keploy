name: Python On Linux
on:
  workflow_call:

jobs:
  test-python-app:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app:
          - name: django-postgres
            path: django-postgres/django_postgres
            script_dir: django_postgres
          - name: flask-mysql-jwt
            path: flask-mysql_app
            script_dir: flask-mysql_app

        config:
          - name: record_latest_replay_build
            record_src: latest
            replay_src: build
          - name: record_build_replay_latest
            record_src: build
            replay_src: latest
          - name: record_build_replay_build
            record_src: build
            replay_src: build

    name: ${{ matrix.app.name }} (${{ matrix.config.name }})
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: record
        uses: ./.github/actions/download-binary
        with:
          src: ${{ matrix.config.record_src }}

      - id: replay
        uses: ./.github/actions/download-binary
        with:
          src: ${{ matrix.config.replay_src }}

      - name: Checkout the samples-python repository
        uses: actions/checkout@v4
        with:
          repository: officialasishkumar/samples-python
          path: samples-python

      - name: Create results directory
        run: mkdir -p results

      - name: Run the ${{ matrix.app.name }} application
        env:
          RECORD_BIN: ${{ steps.record.outputs.path }}
          REPLAY_BIN: ${{ steps.replay.outputs.path }}
        run: |
          set -o pipefail
          cd samples-python/${{ matrix.app.path }}
          source $GITHUB_WORKSPACE/.github/workflows/test_workflow_scripts/python/${{ matrix.app.script_dir }}/python-linux.sh 2>&1 | tee $GITHUB_WORKSPACE/results/output.log

      - name: Gather all logs and reports
        if: always()
        run: |
          APP_DIR="samples-python/${{ matrix.app.path }}"
          RESULTS_DIR="$GITHUB_WORKSPACE/results"

          # Copy the entire keploy directory if it exists
          if [ -d "$APP_DIR/keploy" ]; then
            cp -r "$APP_DIR/keploy" "$RESULTS_DIR/"
          fi

          # Copy all .txt log files from the application directory
          # The || true prevents the step from failing if no .txt files are found
          cp $APP_DIR/*.txt "$RESULTS_DIR/" || true

      - name: Prepare test results summary
        if: always()
        run: |
          echo "Job: ${{ matrix.app.name }}" > results/summary.txt
          echo "Config: ${{ matrix.config.name }}" >> results/summary.txt
          echo "Status: ${{ job.status }}" >> results/summary.txt

      - name: Upload results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.app.name }}-${{ matrix.config.name }}
          path: results/

  send-summary-report:
    needs: test-python-app
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results

      - name: Prepare email content and attachments
        id: prep-email
        run: |
          BODY_FILE="summary_body.txt"

          echo "Python Linux Tests Report" > $BODY_FILE
          echo "" >> $BODY_FILE
          echo "Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $BODY_FILE
          echo "Repository: ${{ github.repository }}" >> $BODY_FILE
          echo "Branch: ${{ github.ref_name }}" >> $BODY_FILE
          echo "Timestamp: $(date)" >> $BODY_FILE
          echo "" >> $BODY_FILE
          echo "Summary" >> $BODY_FILE
          echo "----------------------------------------------------" >> $BODY_FILE

          failed_count=0
          total_count=0
          failed_zips=()

          for summary_file in $(find all-results -type f -name 'summary.txt'); do
            total_count=$((total_count + 1))
            
            JOB_NAME=$(grep "Job:" "$summary_file" | sed 's/Job: //')
            JOB_CONFIG=$(grep "Config:" "$summary_file" | sed 's/Config: //')
            JOB_STATUS=$(grep "Status:" "$summary_file" | sed 's/Status: //')
            
            if [ "$JOB_STATUS" = "success" ]; then
              STATUS_ICON="✅ Success"
            else
              STATUS_ICON="❌ Failed"
              failed_count=$((failed_count + 1))
              
              artifact_dir=$(dirname "$summary_file")
              zip_name="failed-${JOB_NAME}-${JOB_CONFIG}.zip"
              zip -r "$zip_name" "$artifact_dir"
              failed_zips+=("$zip_name")
            fi
            printf "%-20s | %-30s | %s\n" "$JOB_NAME" "$JOB_CONFIG" "$STATUS_ICON" >> $BODY_FILE
          done

          echo "----------------------------------------------------" >> $BODY_FILE
          echo "" >> $BODY_FILE
          passed_count=$((total_count - failed_count))
          echo "Total Tests: $total_count | Failed: $failed_count | Passed: $passed_count" >> $BODY_FILE

          attachment_paths=$(IFS=,; echo "${failed_zips[*]}")
          echo "attachment_path=${attachment_paths}" >> $GITHUB_OUTPUT

          if [ $failed_count -gt 0 ]; then
            echo "email_subject=🚨 Python Tests FAILED ($failed_count/$total_count) - ${{ github.repository }} #${{ github.run_id }}" >> $GITHUB_OUTPUT
          else
            echo "email_subject=✅ Python Tests PASSED - ${{ github.repository }} #${{ github.run_id }}" >> $GITHUB_OUTPUT
          fi

      - name: Send summary email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: "smtp.gmail.com"
          server_port: "587"
          username: ${{ secrets.GMAIL_USERNAME }}
          password: ${{ secrets.GMAIL_APP_PASSWORD }}
          subject: ${{ steps.prep-email.outputs.email_subject }}
          body: file://summary_body.txt
          to: ${{ secrets.RECIPIENT_EMAILS }}
          from: ${{ secrets.GMAIL_USERNAME }}
          attachments: ${{ steps.prep-email.outputs.attachment_path }}
